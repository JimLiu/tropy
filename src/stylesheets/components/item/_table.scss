//
// Item table
// --------------------------------------------------

.item.table {
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  padding: 0 $space-min;
  position: relative;
  height: 100%;
  contain: strict;

  .scrollbar-style-old-school & {
    padding-right: 0;
  }

  .table-head {
    width: 100%;
    table-layout: fixed;
    border-collapse: separate;
    border-spacing: 0;
    color: $item-table-header-color;

    .scrollbar-style-old-school & {
      width: calc(100% - #{$default-padding-horizontal});
    }
  }

  .metadata-head,
  .metadata {
    padding: 0 $space-xs 0 ($space-xs + 1px);
    position: relative;

    &:last-child {
      padding-right: $space-sm;
    }

    &.number {
      text-align: right;
    }
  }

  .metadata-head {
    text-align: justify;
    font-weight: 400;
    height: $item-table-header-height;
     border: {
      top: 1px solid $item-table-header-border-color;
      bottom: 1px solid $item-table-header-border-color;
    }
    position: relative;

    &:first-child {
      padding-left: $space-sm;

      &::before {
        content: none;
      }
    }

    &::before {
      content: " ";
      position: absolute;
      left: 0;
      top: 2px;
      bottom: 2px;
      width: 1px;
      background: $item-table-header-border-color;
    }

    &:active {
      background: $item-table-header-active-bg;

      &::before {
        top: 0;
        bottom: 0;
      }

      & + .metadata-head {
        &::before {
          top: 0;
          bottom: 0;
        }
      }
    }

    &.number {
      .label {
        padding-left: $space-min;
      }

      .icon {
        order: -1;
      }
    }

    &.ascending,
    &.descending {
      color: $item-table-header-sort-color;

      .icon {
        display: block;
      }
    }

    &.descending {
      .icon {
        transform: scaleY(-1);
      }
    }

    &-container {
      display: flex;
      width: 100%;
      height: 100%;
      justify-content: space-between;
      align-items: center;
    }

    .label {
      @include css-truncation;
      flex: 1 1 auto;
      padding-right: $space-min;
    }

    .icon {
      display: none;
      margin: 0 -4px 0 -5px;
    }
  }

  .table-body {
    flex: 1 1 auto;
    position: relative;
    height: 100%;
    display: flex; // Prevent overflow
    contain: strict;

    &.over {
      @extend %drop-target;
    }
  }

  .scroll-container {
    background-image: repeating-linear-gradient(to bottom,
      $items-odd-bg $space-min, $items-odd-bg ($row-height + $space-min),
      transparent ($row-height + $space-min),
      transparent (2 * $row-height + $space-min));
    background-attachment: local;
    padding-top: $space-min;
    position: relative;
    z-index: 0; // Fix stacking context (overlay toolbar covered by active item)
  }

  .runway {
    contain: strict;
    min-height: 100%; // Needs some flex row parent to work
  }

  .viewport {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
    contain: content;
    will-change: transform;
  }

  .item {
    contain: layout size style;

    .metadata {
      height: $row-height;
    }

    &.active {
      .metadata {
        color: $items-active-color;
        background: $items-active-bg;

        @at-root #{
          selector-replace(&, ".item.table",
            ".item.table .scroll-container:focus")
        } {
          color: $items-focus-color;
          background: $items-focus-bg;

          .icon-circle,
          .icon-crescentcircle {
            .border {
              color: $colors-focus-border-table;
            }
          }
        }
      }
    }

    &.over {
      .metadata {
        @extend %drop-target;
      }
    }
  }

  .metadata {
    &:first-child {
      padding-left:
        $default-padding-horizontal
        + $thumbnail-size
        + $padding-base-horizontal;
    }
  }

  .tag.colors {
    margin-left: $space-xs;
    flex: 0 0 auto;

    .icon-circle,
    .icon-crescentcircle {
      @if $theme == "light" {
        @each $key, $val in $tag-colors {
          &.#{$key} {
            .color {
              color: map-get($val, "color-base");
            }

            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      } @else {
        @each $key, $val in $tag-colors {
          &.#{$key} {
            .color,
            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      }
    }
  }
}
